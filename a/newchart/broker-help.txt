# Recreate the broker_api_full_guide.txt file after environment reset

broker_api_guide = """\
===========================
TRADINGVIEW CHARTING LIBRARY
BROKER API - FULL GUIDE (Extracted)
===========================

üìò GI·ªöI THI·ªÜU
--------------
Broker API l√† giao di·ªán trung gian gi·ªØa TradingView Charting Library v√† h·ªá th·ªëng backend (exchange, broker, ho·∫∑c API giao d·ªãch c·ªßa b·∫°n).
M·ª•c ti√™u c·ªßa Broker API l√† cho ph√©p b·∫°n k·∫øt n·ªëi h·ªá th·ªëng giao d·ªãch th·∫≠t v√†o bi·ªÉu ƒë·ªì TradingView, bao g·ªìm c√°c ch·ª©c nƒÉng:
- Hi·ªÉn th·ªã l·ªánh (Orders), v·ªã th·∫ø (Positions), v√† t√†i kho·∫£n (Account Info).
- ƒê·∫∑t / h·ªßy / s·ª≠a l·ªánh tr·ª±c ti·∫øp t·ª´ bi·ªÉu ƒë·ªì.
- C·∫≠p nh·∫≠t realtime khi l·ªánh, v·ªã th·∫ø, ho·∫∑c s·ªë d∆∞ thay ƒë·ªïi.
- Qu·∫£n l√Ω nhi·ªÅu t√†i kho·∫£n ng∆∞·ªùi d√πng th√¥ng qua Account Manager.

Broker API bao g·ªìm c√°c interface ch√≠nh: IBrokerTerminal, IBrokerCommon, IBrokerAccountInfo, IBrokerConnectionAdapterHost v√† c·∫•u tr√∫c AccountManagerInfo.
===========================
I. IBROKERTERMINAL
===========================
Interface ch√≠nh m√† b·∫°n ph·∫£i tri·ªÉn khai ƒë·ªÉ k·∫øt n·ªëi v·ªõi backend giao d·ªãch.

```ts
export interface IBrokerTerminal extends IBrokerCommon, IBrokerAccountInfo {
    placeOrder(order: PreOrder): Promise<PlacedOrderResult>;
    cancelOrder(orderId: string): Promise<void>;
    modifyOrder?(order: Order): Promise<void>;

    closePosition?(positionId: string): Promise<void>;
    closeIndividualPosition?(positionId: string): Promise<void>;
    reversePosition?(positionId: string): Promise<void>;
    editPositionBrackets?(position: Position): Promise<void>;
    editIndividualPositionBrackets?(position: IndividualPosition): Promise<void>;

    previewOrder?(order: PreOrder): Promise<PreviewOrderResult>;
    previewModifyOrder?(order: Order): Promise<PreviewOrderResult>;
    previewClosePosition?(position: Position): Promise<ClosePositionPreviewResult>;

    subscribeMarginAvailable?(): Promise<void>;
    unsubscribeMarginAvailable?(): Promise<void>;
    subscribePipValue?(symbol: string): Promise<void>;
    unsubscribePipValue?(symbol: string): Promise<void>;
    subscribeDepth?(symbol: string): Promise<void>;
    unsubscribeDepth?(symbol: string): Promise<void>;

    marginAvailable?(): Promise<number>;
    leverageInfo?(symbol: string): Promise<LeverageInfo>;
    cryptoBalance?(): Promise<CryptoBalance[]>;
}
Interface ch√≠nh m√† b·∫°n ph·∫£i tri·ªÉn khai ƒë·ªÉ k·∫øt n·ªëi v·ªõi backend giao d·ªãch.
(Chi ti·∫øt ƒë√£ ƒë∆∞·ª£c tr√≠ch ƒë·∫ßy ƒë·ªß trong file g·ªëc charting-library-context.txt)
===========================
II. IBROKERCOMMON

export interface IBrokerCommon {
    chartContextMenuActions(context: TradeContext, options?: DefaultContextMenuActionsParams): Promise<ActionMetaInfo[]>;
    isTradable(symbol: string): Promise<boolean | IsTradableResult>;
    connectionStatus(): ConnectionStatus;

    orders(): Promise<Order[]>;
    ordersHistory?(): Promise<Order[]>;
    positions?(): Promise<Position[]>;
    individualPositions?(): Promise<IndividualPosition[]>;
    executions(symbol: string): Promise<Execution[]>;

    symbolInfo(symbol: string): Promise<InstrumentInfo>;
    accountManagerInfo(): AccountManagerInfo;

    formatter?(symbol: string, alignToMinMove: boolean): Promise<INumberFormatter>;
    spreadFormatter?(symbol: string): Promise<INumberFormatter>;
    quantityFormatter?(symbol: string): Promise<INumberFormatter>;

    getOrderDialogOptions?(symbol: string): Promise<OrderDialogOptions | undefined>;
    getPositionDialogOptions?(symbol: string): Promise<PositionDialogOptions | undefined>;
    getSymbolSpecificTradingOptions?(symbol: string): Promise<SymbolSpecificTradingOptions | undefined>;
}
===========================
Cung c·∫•p c√°c ph∆∞∆°ng th·ª©c d·ªØ li·ªáu c∆° b·∫£n cho Orders, Positions, Executions, Symbol info, v√† Account Manager.
===========================
III. IBROKERACCOUNTINFO
export interface IBrokerConnectionAdapterHost {
    factory: IBrokerConnectionAdapterFactory;
    connectionStatusUpdate(status: ConnectionStatus, info?: DisconnectionInfo): void;

    orderUpdate(order: Order): void;
    ordersFullUpdate(): void;
    orderPartialUpdate(id: string, orderChanges: Partial<Order>): void;

    positionUpdate(position: Position, isHistoryUpdate?: boolean): void;
    positionsFullUpdate(): void;
    positionPartialUpdate(id: string, positionChanges: Partial<Position>): void;

    individualPositionUpdate(individualPosition: IndividualPosition, isHistoryUpdate?: boolean): void;
    individualPositionsFullUpdate(): void;
    individualPositionPartialUpdate(id: string, changes: Partial<IndividualPosition>): void;

    executionUpdate(execution: Execution): void;
    plUpdate(positionId: string, pl: number): void;
    individualPositionPLUpdate(individualPositionId: string, pl: number): void;

    currentAccountUpdate(): void;
    equityUpdate(equity: number): void;
    marginAvailableUpdate(marginAvailable: number): void;
    cryptoBalanceUpdate(symbol: string, balance: CryptoBalance): void;

    realtimeUpdate(symbol: string, data: TradingQuotes): void;
    pipValueUpdate(symbol: string, pipValues: PipValues): void;
    domUpdate(symbol: string, equity: DOMData): void;

    showNotification(title: string, text: string, type?: NotificationType): void;
    showCancelOrderDialog(orderId: string, handler: () => Promise<void>): Promise<void>;
    showConfirmDialog(title: string, content: string | string[]): Promise<boolean>;

    getAccountManagerVisibilityMode(): IWatchedValueReadonly<BottomWidgetBarMode>;
    setAccountManagerVisibilityMode(mode: BottomWidgetBarMode): void;
}

===========================
Qu·∫£n l√Ω th√¥ng tin t√†i kho·∫£n: danh s√°ch t√†i kho·∫£n, t√†i kho·∫£n hi·ªán t·∫°i v√† chuy·ªÉn ƒë·ªïi gi·ªØa c√°c account.
===========================
IV. IBROKERCONNECTIONADAPTERHOST
export interface AccountManagerInfo {
    accountTitle: string;
    summary: AccountManagerSummaryField[];
    customFormatters?: CustomTableElementFormatter[];
    orderColumns: OrderTableColumn[];
    orderColumnsSorting?: SortingParameters;
    historyColumns?: AccountManagerColumn[];
    historyColumnsSorting?: SortingParameters;
    positionColumns?: AccountManagerColumn[];
    individualPositionColumns?: AccountManagerColumn[];
    pages: AccountManagerPage[];
    possibleOrderStatuses?: OrderStatus[];
    marginUsed?: IWatchedValue<number>;
    contextMenuActions?(event: MouseEvent, activePageActions: ActionMetaInfo[]): Promise<ActionMetaInfo[]>;
}

===========================
Interface gi√∫p backend g·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t realtime ng∆∞·ª£c l·∫°i cho Charting Library.
===========================
V. ACCOUNTMANAGERINFO
export interface AccountManagerInfo {
    accountTitle: string;
    summary: AccountManagerSummaryField[];
    customFormatters?: CustomTableElementFormatter[];
    orderColumns: OrderTableColumn[];
    orderColumnsSorting?: SortingParameters;
    historyColumns?: AccountManagerColumn[];
    historyColumnsSorting?: SortingParameters;
    positionColumns?: AccountManagerColumn[];
    individualPositionColumns?: AccountManagerColumn[];
    pages: AccountManagerPage[];
    possibleOrderStatuses?: OrderStatus[];
    marginUsed?: IWatchedValue<number>;
    contextMenuActions?(event: MouseEvent, activePageActions: ActionMetaInfo[]): Promise<ActionMetaInfo[]>;
}

===========================
C·∫•u tr√∫c ƒë·ªãnh nghƒ©a giao di·ªán hi·ªÉn th·ªã Account Manager: Orders, Positions, History, Summary v√† Custom pages.
===========================
VI. ACCOUNTMANAGERPAGE / TABLE / COLUMN
export interface AccountManagerPage {
    id: string;
    title: string;
    tables: AccountManagerTable[];
    displayCounterInTab?: boolean;
}

export interface AccountManagerTable {
    id: string;
    title?: string;
    columns: AccountManagerColumn[];
    initialSorting?: SortingParameters;
    changeDelegate: ISubscription<(data: {}) => void>;
    deleteDelegate?: ISubscription<(id: string) => void>;
    flags?: AccountManagerTableFlags;
    getData(paginationLastId?: string | number): Promise<{}[]>;
}

export interface AccountManagerColumnBase<TFormatterName extends StandardFormatterName | FormatterName> {
    label: string;
    id: string;
    alignment?: "left" | "right";
    formatter?: TFormatterName;
    dataFields: string[];
    sortProp?: string;
    notSortable?: boolean;
    help?: string;
    highlightDiff?: boolean;
    notHideable?: boolean;
    hideByDefault?: boolean;
    tooltipProperty?: string;
    isCapitalize?: boolean;
    showZeroValues?: boolean;
}

===========================
ƒê·ªãnh nghƒ©a t·ª´ng b·∫£ng d·ªØ li·ªáu v√† c·ªôt hi·ªÉn th·ªã trong Account Manager.
===========================
VII. BROKER CONFIG FLAGS
export interface BrokerConfigFlags {
    supportPositions?: boolean;
    supportIndividualPositions?: boolean;
    supportOrdersHistory?: boolean;
    supportClosePosition?: boolean;
    supportReversePosition?: boolean;
    supportModifyOrderPrice?: boolean;
    showNotificationsLog?: boolean;
    supportBalances?: boolean;
    supportPositionNetting?: boolean;
}

===========================
C√°c c·ªù c·∫•u h√¨nh ƒëi·ªÅu khi·ªÉn t√≠nh nƒÉng UI giao d·ªãch v√† h·ªó tr·ª£ Account Manager.
===========================
VIII. ENUMS & TR·∫†NG TH√ÅI LI√äN QUAN
export const enum ConnectionStatus {
    Connected = 1,
    Connecting = 2,
    Disconnected = 3,
    Error = 4
}

export const enum OrderStatus {
    Canceled = 1,
    Filled = 2,
    Inactive = 3,
    Placing = 4,
    Rejected = 5,
    Working = 6
}

export const enum Side {
    Buy = 1,
    Sell = -1
}

export const enum NotificationType {
    Error = 0,
    Success = 1
}

export const enum BottomWidgetBarMode {
    Minimized = "minimized",
    Normal = "normal",
    Maximized = "maximized"
}

===========================
Bao g·ªìm ConnectionStatus, OrderStatus, Side, NotificationType, BottomWidgetBarMode.
===========================
IX. QUY TR√åNH K·∫æT N·ªêI
===========================
1Ô∏è‚É£ TradingView g·ªçi IBrokerTerminal ƒë·ªÉ l·∫•y d·ªØ li·ªáu.  
2Ô∏è‚É£ Backend tr·∫£ k·∫øt qu·∫£ v·ªÅ d·∫°ng Order, Position, Execution.  
3Ô∏è‚É£ G·ª≠i d·ªØ li·ªáu realtime qua host (`orderUpdate`, `positionUpdate`).  
4Ô∏è‚É£ Account Manager hi·ªÉn th·ªã v√† c·∫≠p nh·∫≠t c√°c b·∫£ng theo c·∫•u h√¨nh.
===========================
X. K·∫æT LU·∫¨N
===========================
Broker API cho ph√©p t√≠ch h·ª£p backend giao d·ªãch th·ª±c t·∫ø v√†o UI TradingView theo c√°ch chu·∫©n h√≥a v√† realtime.
===========================
END OF EXTRACTED GUIDE
===========================
"""

file_path = "/mnt/data/broker_api_full_guide.txt"
with open(file_path, "w", encoding="utf-8") as f:
    f.write(broker_api_guide)

file_path
