/**
 * SaveLoad Engine for TradingView Charting Library
 * K·∫øt n·ªëi v·ªõi PocketBase ƒë·ªÉ l∆∞u/t·∫£i chart layouts
 */

// S·ª≠ d·ª•ng PocketBase t·ª´ window object (loaded t·ª´ CDN)
(function (window) {
    'use strict';

    const PocketBase = window.PocketBase || (function () {
        throw new Error('PocketBase SDK ch∆∞a ƒë∆∞·ª£c load. Vui l√≤ng th√™m script tag cho PocketBase SDK.');
    })();

    /**
     * T·∫°o SaveLoad Engine instance
     * @param {Object} options - C·∫•u h√¨nh
     * @param {string} options.userId - ID ng∆∞·ªùi d√πng (optional)
     * @param {boolean} options.autoSave - B·∫≠t autosave (default: true)
     * @param {number} options.autoSaveDelay - Delay autosave t√≠nh b·∫±ng ms (default: 8000)
     * @param {string} options.pocketbaseUrl - URL PocketBase instance (default: https://crypto.pockethost.io)
     * @returns {Object} SaveLoad adapter object
     */
    function createSaveLoadEngine({
        userId = null,
        autoSave = true,
        autoSaveDelay = 1000,
        pocketbaseUrl = 'https://crypto.pockethost.io'
    } = {}) {

        // Kh·ªüi t·∫°o PocketBase client
        const pb = new PocketBase(pocketbaseUrl);
        pb.autoCancellation(false);
        // Timer cho autosave debounce
        let autoSaveTimer = null;

        // Collection name
        const COLLECTION_NAME = 'chart_layouts';

        /**
         * Chu·∫©n h√≥a d·ªØ li·ªáu chart t·ª´ TradingView format
         * @param {Object} chartData - D·ªØ li·ªáu chart t·ª´ TradingView
         * @returns {Object} Payload chu·∫©n h√≥a cho PocketBase
         */
        function normalizeChartData(chartData) {
            console.log('üîÑ Normalizing chart data:', chartData);

            // X·ª≠ l√Ω c√°c format kh√°c nhau t·ª´ TradingView
            let layout, version, symbol, interval, name;

            if (chartData.charts && Array.isArray(chartData.charts) && chartData.charts.length > 0) {
                // Format chu·∫©n t·ª´ TradingView save
                const chart = chartData.charts[0];
                layout = chart.data || chart;
                version = chart.version || 1;
                symbol = chartData.symbol || 'UNKNOWN';
                interval = chartData.interval || '1D';
                name = chartData.name || `Layout ${new Date().toLocaleString()}`;
            } else {
                // Format ƒë∆°n gi·∫£n ho·∫∑c custom
                layout = chartData.layout || chartData;
                version = chartData.version || 1;
                symbol = chartData.symbol || 'UNKNOWN';
                interval = chartData.interval || '1D';
                name = chartData.name || `Layout ${new Date().toLocaleString()}`;
            }

            const payload = {
                name: name,
                symbol: symbol,
                interval: interval,
                layout: layout,
                version: version
            };

            // Th√™m user n·∫øu c√≥
            if (userId) {
                payload.user = userId;
            }

            return payload;
        }

        /**
         * L∆∞u chart layout l√™n server
         * @param {Object} chartData - D·ªØ li·ªáu chart t·ª´ TradingView
         * @returns {Promise<Object>} Response v·ªõi ID c·ªßa record ƒë√£ t·∫°o
         */
        async function saveChartToServer(chartData) {
            try {
                console.log('üíæ Saving chart to server...', chartData);

                const payload = normalizeChartData(chartData);
                console.log('üì§ Payload to save:', payload);

                const record = await pb.collection(COLLECTION_NAME).create(payload);

                console.log('‚úÖ Chart layout saved successfully:', record.id);
                return { id: record.id };

            } catch (error) {
                console.error('‚ùå Error saving chart layout:', error);
                throw new Error(`Kh√¥ng th·ªÉ l∆∞u chart layout: ${error.message}`);
            }
        }

        /**
         * T·∫£i chart layout t·ª´ server
         * @param {string} chartId - ID c·ªßa chart layout
         * @returns {Promise<Object>} Chart data theo format TradingView
         */
        async function loadChartFromServer(chartId) {
            try {
                console.log('üì• Loading chart from server:', chartId);

                const record = await pb.collection(COLLECTION_NAME).getOne(chartId);

                console.log('‚úÖ Chart layout loaded successfully:', record.id);

                // Tr·∫£ v·ªÅ format m√† TradingView Charting Library y√™u c·∫ßu
                return {
                    symbol: record.symbol,
                    interval: record.interval,
                    charts: [{
                        version: record.version,
                        data: record.layout
                    }]
                };

            } catch (error) {
                console.error('‚ùå Error loading chart layout:', error);
                throw new Error(`Kh√¥ng th·ªÉ t·∫£i chart layout: ${error.message}`);
            }
        }

        /**
         * X·ª≠ l√Ω autosave khi c·∫ßn thi·∫øt
         * @param {Object} widget - TradingView widget instance
         */
        function onAutoSaveNeeded(widget) {
            if (!autoSave) {
                console.log('üîï AutoSave disabled');
                return;
            }

            // Clear timer c≈© n·∫øu c√≥
            if (autoSaveTimer) {
                clearTimeout(autoSaveTimer);
            }

            console.log(`‚è∞ AutoSave scheduled in ${autoSaveDelay}ms`);

            // T·∫°o timer m·ªõi v·ªõi debounce
            autoSaveTimer = setTimeout(async () => {
                try {
                    console.log('üîÑ AutoSave triggered');

                    // G·ªçi widget.save() ƒë·ªÉ l·∫•y d·ªØ li·ªáu chart hi·ªán t·∫°i
                    widget.save(async (chartData) => {
                        try {
                            await saveChartToServer(chartData);
                            console.log('‚úÖ AutoSave completed successfully');
                        } catch (error) {
                            console.error('‚ùå AutoSave failed:', error);
                        }
                    });

                } catch (error) {
                    console.error('‚ùå AutoSave error:', error);
                }
            }, autoSaveDelay);
        }

        /**
         * Li·ªát k√™ t·∫•t c·∫£ chart layouts c·ªßa user (TradingView y√™u c·∫ßu h√†m n√†y)
         * @param {string} targetUserId - ID ng∆∞·ªùi d√πng (optional, d√πng userId t·ª´ config n·∫øu kh√¥ng c√≥)
         * @returns {Promise<Array>} Danh s√°ch chart layouts theo format TradingView
         */
        async function getAllCharts(targetUserId = userId) {
            try {
                console.log('üìã Getting all charts for:', targetUserId);

                let filter = '';
                if (targetUserId) {
                    filter = `user = "${targetUserId}"`;
                }

                const records = await pb.collection(COLLECTION_NAME).getList(1, 50, {
                    filter: filter,
                    sort: '-updated',
                    requestKey: null
                });

                console.log('‚úÖ Found', records.items.length, 'chart layouts');

                // Chuy·ªÉn ƒë·ªïi sang format m√† TradingView y√™u c·∫ßu
                return records.items.map(record => ({
                    id: record.id,
                    name: record.name,
                    symbol: record.symbol,
                    interval: record.interval,
                    timestamp: new Date(record.updated).getTime() / 1000 // Unix timestamp
                }));

            } catch (error) {
                console.error('‚ùå Error getting all charts:', error);
                throw new Error(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch chart layouts: ${error.message}`);
            }
        }

        /**
         * Alias cho getAllCharts ƒë·ªÉ t∆∞∆°ng th√≠ch
         * @param {string} targetUserId - ID ng∆∞·ªùi d√πng (optional)
         * @returns {Promise<Array>} Danh s√°ch chart layouts
         */
        async function listUserCharts(targetUserId = userId) {
            return getAllCharts(targetUserId);
        }

        /**
         * X√≥a chart layout (TradingView y√™u c·∫ßu h√†m n√†y)
         * @param {string} chartId - ID c·ªßa chart layout c·∫ßn x√≥a
         * @returns {Promise<boolean>} True n·∫øu x√≥a th√†nh c√¥ng
         */
        async function removeChart(chartId) {
            try {
                console.log('üóëÔ∏è Removing chart:', chartId);

                await pb.collection(COLLECTION_NAME).delete(chartId);

                console.log('‚úÖ Chart layout removed successfully');
                return true;

            } catch (error) {
                console.error('‚ùå Error removing chart layout:', error);
                throw new Error(`Kh√¥ng th·ªÉ x√≥a chart layout: ${error.message}`);
            }
        }

        /**
         * Alias cho removeChart ƒë·ªÉ t∆∞∆°ng th√≠ch
         * @param {string} chartId - ID c·ªßa chart layout c·∫ßn x√≥a
         * @returns {Promise<boolean>} True n·∫øu x√≥a th√†nh c√¥ng
         */
        async function deleteChart(chartId) {
            return removeChart(chartId);
        }

        /**
         * C·∫≠p nh·∫≠t chart layout hi·ªán c√≥
         * @param {string} chartId - ID c·ªßa chart layout
         * @param {Object} chartData - D·ªØ li·ªáu chart m·ªõi
         * @returns {Promise<Object>} Record ƒë√£ c·∫≠p nh·∫≠t
         */
        async function updateChart(chartId, chartData) {
            try {
                console.log('üìù Updating chart:', chartId);

                const payload = normalizeChartData(chartData);
                const record = await pb.collection(COLLECTION_NAME).update(chartId, payload);

                console.log('‚úÖ Chart layout updated successfully');
                return record;

            } catch (error) {
                console.error('‚ùå Error updating chart layout:', error);
                throw new Error(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t chart layout: ${error.message}`);
            }
        }

        /**
         * L·∫•y th√¥ng tin chart metadata (kh√¥ng load full data)
         * @param {string} chartId - ID c·ªßa chart layout
         * @returns {Promise<Object>} Chart metadata
         */
        async function getChartContent(chartId) {
            try {
                console.log('üìÑ Getting chart content:', chartId);

                const record = await pb.collection(COLLECTION_NAME).getOne(chartId);

                return {
                    id: record.id,
                    name: record.name,
                    symbol: record.symbol,
                    interval: record.interval,
                    timestamp: new Date(record.updated).getTime() / 1000
                };

            } catch (error) {
                console.error('‚ùå Error getting chart content:', error);
                throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chart: ${error.message}`);
            }
        }

        /**
         * Ki·ªÉm tra xem c√≥ th·ªÉ save chart kh√¥ng
         * @returns {boolean} True n·∫øu c√≥ th·ªÉ save
         */
        function canSaveChart() {
            return true; // Lu√¥n cho ph√©p save
        }

        /**
         * Ki·ªÉm tra xem c√≥ th·ªÉ load chart kh√¥ng
         * @returns {boolean} True n·∫øu c√≥ th·ªÉ load
         */
        function canLoadChart() {
            return true; // Lu√¥n cho ph√©p load
        }

        /**
         * L·∫•y default chart name
         * @returns {string} Default chart name
         */
        function getDefaultChartName() {
            return `Layout ${new Date().toLocaleString()}`;
        }

        /**
         * Validate chart data tr∆∞·ªõc khi save
         * @param {Object} chartData - Chart data to validate
         * @returns {boolean} True if valid
         */
        function validateChartData(chartData) {
            return chartData && (chartData.charts || chartData.layout);
        }

        // Tr·∫£ v·ªÅ SaveLoad adapter object theo chu·∫©n TradingView
        const adapter = {
            // C√°c h√†m b·∫Øt bu·ªôc cho TradingView save_load_adapter
            saveChartToServer,
            loadChartFromServer,
            onAutoSaveNeeded,
            getAllCharts,
            removeChart,
            getChartContent,

            // C√°c h√†m ki·ªÉm tra capability
            canSaveChart,
            canLoadChart,
            getDefaultChartName,
            validateChartData,

            // C√°c h√†m b·ªï sung ti·ªán √≠ch (aliases)
            listUserCharts,
            deleteChart,
            updateChart,

            // Getter cho c·∫•u h√¨nh
            get userId() { return userId; },
            get autoSave() { return autoSave; },
            get autoSaveDelay() { return autoSaveDelay; },

            // Setter ƒë·ªÉ thay ƒë·ªïi c·∫•u h√¨nh runtime
            setUserId(newUserId) { userId = newUserId; },
            setAutoSave(enabled) { autoSave = enabled; },
            setAutoSaveDelay(delay) { autoSaveDelay = delay; }
        };

        console.log('üöÄ SaveLoad Engine initialized:', {
            userId,
            autoSave,
            autoSaveDelay,
            pocketbaseUrl
        });

        console.log('üìã Available methods:', Object.keys(adapter));

        return adapter;
    }

    // Expose to global scope
    window.createSaveLoadEngine = createSaveLoadEngine;

})(window);